"use strict";const e=require("fs").promises,s=require("path");module.exports=({filter:i,action:n},{services:o,database:a,getSchema:r})=>{const{RolesService:t,PermissionsService:l,UsersService:c,ItemsService:d}=o;async function g(s){console.log(`Reading json file from ${s}`);var i=await e.readFile(s);return JSON.parse(i)}n("server.start",(async()=>{const e=await r();await async function(e){console.log("Seeding roles...");const i=await g(s.join(__dirname,"../../../seeddata/roles.json"));var n=new t({knex:a,schema:e});(await n.readByQuery({fields:"id"})).length<=1?(console.log("Only one role exists, creating other roles..."),await n.upsertMany(i),console.log("Finished creating roles")):console.log("More than one role already exists, skipping seed...")}(e),await async function(e){console.log("Seeding permissions...");const i=await g(s.join(__dirname,"../../../seeddata/permissions.json"));var n=new l({knex:a,schema:e});0===(await n.readByQuery({fields:"id"})).length?(console.log("No custom permissions exist in the database, creating..."),await permisssionsService.upsertMany(i),console.log("Finished creating permissions")):console.log("Permissions already exists, skipping creation...")}(e),await async function(e){console.log("Seeding users...");const i=await g(s.join(__dirname,"../../../seeddata/users.json"));var n=new c({knex:a,schema:e});(await n.readByQuery({fields:"id"})).length<=1?(console.log("Only one user exists, creating other users..."),await n.upsertMany(i),console.log("Finished creating users")):console.log("More than one user already exists, skipping seed...")}(e);var i=await async function(e){console.log("Seeding services...");const i=await g(s.join(__dirname,"../../../seeddata/services.json"));var n=new d("services",{knex:a,schema:e});if(0===(await n.readByQuery({fields:"id"})).length){console.log("No services exist, creating...");var o=await n.upsertMany(i);return console.log("Finished creating services"),o}return console.log("Services already exist, skipping seed..."),[]}(e);await async function(e,i){console.log("Seeding employees...");const n=await g(s.join(__dirname,"../../../seeddata/employees.json"));var o=new d("employees",{knex:a,schema:e});0===(await o.readByQuery({fields:"id"})).length?(i.length>0&&i.length>2&&n.length>1&&(n[0].services=i.slice(0,2).map((e=>({services_id:e}))),n[1].services=i.slice(2,3).map((e=>({services_id:e}))),console.log("employees => ",n)),console.log("No employees exist, creating..."),await o.upsertMany(n),console.log("Finished creating employees")):console.log("Employees already exist, skipping seed...")}(e,i)}))};
